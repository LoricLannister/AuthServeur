{"version":3,"sources":["../../../public/js/session-validator.js"],"names":["SessionValidator","options","internalOptions","check_frequency","jQuery","extend","validate_url","refresh_url","timeout_url","intervalId","callback","console","log","$this","sessionCheck","terminate","get","data","sessionValid","window","location","href","fail","stop","setTimeout","monitor","done","post","exports"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6DMA,gB;;AAEJ;;;;;;;;;;;;;;;;;;;AAmBA,4BAAYC,OAAZ,EACA;AAAA;;AACE,QAAIC,kBAAkB,EAACC,iBAAiB,EAAlB,EAAtB;AACAC,WAAOC,MAAP,CAAcH,eAAd,EAA+BD,OAA/B;AACA,SAAKK,YAAL,GAAoBJ,gBAAgBI,YAApC;AACA,SAAKC,WAAL,GAAmBL,gBAAgBK,WAAnC;AACA,SAAKC,WAAL,GAAmBN,gBAAgBM,WAAnC;AACA,SAAKC,UAAL,GAAkB,CAAC,CAAnB;AACA,SAAKC,QAAL,GAAgBR,gBAAgBQ,QAAhC;AACA,SAAKP,eAAL,GAAuBD,gBAAgBC,eAAvC;AACD;;AAED;;;;;;;;8BAKA;AACEQ,cAAQC,GAAR,CAAY,oBAAZ;AACA,UAAIC,QAAQ,IAAZ;AACAT,aAAO,YACP;AACE;AACA;;;;AAIA,YAAIU,eAAe,SAAfA,YAAe,GACnB;AACE,cAAID,MAAME,SAAN,KAAoB,IAAxB,EACA;AACE;AACD;;AAEDX,iBAAOY,GAAP,CAAWH,MAAMP,YAAjB,EAA+B,UAAUW,IAAV,EAC/B;AACE;AACAJ,kBAAMH,QAAN,CAAeO,IAAf;AACA,gBAAI,CAACA,KAAKC,YAAN,IAAsBL,MAAML,WAAhC,EACA;AACEW,qBAAOC,QAAP,CAAgBC,IAAhB,GAAuBR,MAAML,WAA7B;AACD;AACF,WARD,EAQGc,IARH,CAQQ,YACR;AAAE;AACAX,oBAAQC,GAAR,CAAY,yDACV,4BADF;AAEAC,kBAAMU,IAAN;AACAC,uBAAW,YACX;AAAE;AACAX,oBAAMY,OAAN;AACD,aAHD,EAGG,KAHH;AAID,WAjBD,EAiBGC,IAjBH,CAiBQ,YACR;AAAE;AACAb,kBAAMJ,UAAN,GACEe,WAAWV,YAAX,EAAyBD,MAAMV,eAAN,GAAwB,IAAjD,CADF;AAED,WArBD;AAsBD,SA7BD;;AA+BA;AACAW;AACD,OAxCD;AAyCD;;AAED;;;;;;8BAIA;AACE,UAAID,QAAQ,IAAZ;AACA,UAAIA,MAAMN,WAAV,EACA;AACEH,eAAO,YACP;AACEA,iBAAOuB,IAAP,CAAYd,MAAMN,WAAlB;AACD,SAHD;AAID;AACF;;AAED;;;;;;2BAIA;AACE,WAAKQ,SAAL,GAAiB,IAAjB;AACAJ,cAAQC,GAAR,CAAY,+BAAZ;AACD;;;;;;AAGHgB,QAAQ5B,gBAAR,GAA2BA,gBAA3B","file":"session-validator.js","sourcesContent":["/**\n *\n * Copyright 2017 Trenton D. Adams\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\n\n/**\n * This class defines and implements an HTTP session validator.  It requires a\n * web service which returns a valid JSON session object in the form indicated\n * below  The given service should not manipulate the session in any way, it\n * should simply return information about the session in the specified format.\n * <p/>\n * This class also requires jQuery to be present.\n * <p/>\n * Once a result from the server is obtained, the callback will be called.\n * The jQuery document ready has already been fired at this point, and there\n * is no need to wrap your code in a jQuery(function(){}) block\n *\n * @example\n * // The web service should simply return a json object like this...\n * curl -H 'Accept: application/json' http://localhost:3000/check-session\n * { sessionValid: true, sessionTime: 600 }\n *\n * // The following code will work with the example html snippet at the bottom.\n *   function displayTime(result) {\n *     jQuery('#session-time').text(Math.ceil(result.sessionTime / 60) + 'm or ' +\n *           result.sessionTime + 's');\n *   };\n *   let sessionValidator = new SessionValidator({validate_url:\n *     'http://localhost:3000/check-session', refresh_url:\n *     'http://localhost:3000/refresh-session', check_frequency: 1,\n *     timeout_url: 'http://localhost:3000/timeout', callback:\n *     function (result)\n *     {\n *       displayTime(result);\n *       if (result.sessionTime < 60)\n *       {\n *         jQuery('#more-time').show();\n *       }\n *     }});\n *   sessionValidator.monitor();\n *\n *   jQuery(function ()\n *   {\n *     jQuery('#refresh').unbind('click').bind('click', function(event)\n *     {\n *       sessionValidator.refresh();\n *       jQuery('#more-time').hide();\n *       displayTime({sessionValid: true, sessionTime: 600});\n *     });\n *   });\n *\n * // With the above code, the following will occur...\n * // The \"more-time\" div will be displayed when less than 1 minute is left in\n * // the session\n *\n * // The \"refresh\" button can be clicked to refresh the time\n *\n * // The \"session-time\" will have it's contents replaced with the time left.\n * <div>\n *   <span id=\"session-message\">Your session will expire in:</span>\n *   <span id=\"session-time\"></span>\n * </div>\n * <div id=\"more-time\" style=\"display:none;\">\n *   <button id=\"refresh\" name=\"I need more time\">I need more time</button>\n * </div>\n */\nclass SessionValidator {\n\n  /**\n   * Setup the SessionValidator.\n   *\n   * @param {Object} options\n   * @param {String} options.validate_url The GET url which returns a proper\n   * JSON session object instance\n   * @param {String} options.refresh_url The url you'd like to support\n   * refreshing the session. null if you do not need this functionality.  See\n   * the refresh() method for more information.\n   * @param {String} options.timeout_url The url you'd like to redirect to when\n   * the session times\n   * out. nul if you do not need this functionality.\n   * @param {String} options.callback The callback in the form\n   * \"function(result){}\", where\n   * result is in the form { sessionValid: true, sessionTime: 600}\n   * @param {String} options.check_frequency How often should the session\n   * check web service be called, in seconds.\n   *\n   */\n  constructor(options)\n  {\n    let internalOptions = {check_frequency: 10};\n    jQuery.extend(internalOptions, options);\n    this.validate_url = internalOptions.validate_url;\n    this.refresh_url = internalOptions.refresh_url;\n    this.timeout_url = internalOptions.timeout_url;\n    this.intervalId = -1;\n    this.callback = internalOptions.callback;\n    this.check_frequency = internalOptions.check_frequency;\n  }\n\n  /**\n   * Starts the session monitoring process by using setTimeout().  We get\n   * the session time left every 10 seconds, subsequently calling the callback.\n   */\n  monitor()\n  {\n    console.log('monitoring session');\n    let $this = this;\n    jQuery(function ()\n    {\n      //console.log(selector);\n      /**\n       * Checks if the session is valid by making an ajax call to the session\n       * validate url.\n       */\n      let sessionCheck = function ()\n      {\n        if ($this.terminate === true)\n        {\n          return;\n        }\n\n        jQuery.get($this.validate_url, function (data)\n        {\n          //console.log(data);\n          $this.callback(data);\n          if (!data.sessionValid && $this.timeout_url)\n          {\n            window.location.href = $this.timeout_url;\n          }\n        }).fail(function ()\n        { // utter failure, let's just try it all again in another minute.\n          console.log('an error occurred monitoring the session, stopping, ' +\n            'trying again in 60 seconds');\n          $this.stop();\n          setTimeout(function ()\n          { // attempt to start again in 60 seconds\n            $this.monitor()\n          }, 60000);\n        }).done(function ()\n        { // success, check again in x seconds.\n          $this.intervalId =\n            setTimeout(sessionCheck, $this.check_frequency * 1000);\n        });\n      };\n\n      // check once the first time, and set an interval afterwards\n      sessionCheck();\n    });\n  }\n\n  /**\n   * The refresh url should accept a simple empty post, with no parameters.\n   */\n  refresh()\n  {\n    let $this = this;\n    if ($this.refresh_url)\n    {\n      jQuery(function ()\n      {\n        jQuery.post($this.refresh_url);\n      });\n    }\n  }\n\n  /**\n   * Stops the session monitoring by using clearInterval().\n   */\n  stop()\n  {\n    this.terminate = true;\n    console.log('monitoring of session stopped');\n  }\n}\n\nexports.SessionValidator = SessionValidator;\n"]}