{"version":3,"sources":["../../app/session_manager.js"],"names":["express","require","router","Router","SessionManager","randomNumber","Math","random","instanceRequests","session","sessionValid","sessionTime","terminate","intervalVariable","undefined","console","log","sessionManager","setInterval","sessionCounter","Number","clearInterval","module","exports"],"mappings":";;;;;;AAAA;;AAEA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AAAA,IACEC,SAASF,QAAQG,MAAR,EADX;;AAGA;;;;;;;;;;;;IAWMC,c;AACJ,4BACA;AAAA;;AACE,SAAKC,YAAL,GAAoBC,KAAKC,MAAL,EAApB;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AACA,SAAKC,OAAL,GAAe;AACbC,oBAAc,KADD;AAEbC,mBAAa;AAFA,KAAf;AAIA,SAAKC,SAAL,GAAiB,KAAjB;AACD;;AAED;;;;;;;;;;;AAsBA;;;mCAIA;AACE,UAAI,KAAKC,gBAAL,KAA0BC,SAA9B,EACA;AACEC,gBAAQC,GAAR,CAAY,0BAAZ;AACAC,uBAAeR,OAAf,CAAuBC,YAAvB,GAAsC,IAAtC;AACAO,uBAAeR,OAAf,CAAuBE,WAAvB,GAAqC,GAArC;AACA,aAAKE,gBAAL,GAAwBK,YAAYd,eAAee,cAA3B,EAA2C,IAA3C,CAAxB;AACD;AACF;;;;;AAED;;;;oCAKA;AACE;AACA,WAAKV,OAAL,GAAe;AACbC,sBAAc,KADD;AAEbC,qBAAa;AAFA,OAAf;AAIA,WAAKC,SAAL,GAAiB,IAAjB;AACD;;;qCA1CD;AACE,UAAIK,eAAeL,SAAf,IACFQ,OAAOH,eAAeR,OAAf,CAAuBE,WAA9B,KAA8CS,OAAO,CAAP,CADhD,EAEA;AACEC,sBAAcJ,eAAeJ,gBAA7B;AACAI,uBAAeJ,gBAAf,GAAkCC,SAAlC;AACAG,uBAAeL,SAAf,GAA2B,KAA3B;AACAK,uBAAeR,OAAf,CAAuBC,YAAvB,GAAsC,KAAtC;AACAO,uBAAeR,OAAf,CAAuBE,WAAvB,GAAqC,CAArC;AACA;AACD;;AAEDM,qBAAeR,OAAf,CAAuBE,WAAvB;AACA;AACD;;;;;AA8BH;;;AACA,IAAIM,iBAAiBH,SAArB;AACA,IAAIG,mBAAmBH,SAAvB,EACA;AACE;AACAG,mBAAiB,IAAIb,cAAJ,EAAjB;AACD,CAJD,MAMA;AACEa,iBAAeT,gBAAf;AACA;AACD;;AAEDO,QAAQC,GAAR,CAAY,yBAAyBC,eAAeZ,YAApD;AACAiB,OAAOC,OAAP,CAAenB,cAAf,GAAgCa,cAAhC","file":"session_manager.js","sourcesContent":["/**\n */\nlet express = require('express'),\n  router = express.Router();\n\n/**\n * This is an INTERNAL session manager unrelated to session validation, and\n * is present only for reference purposes.  We use it for testing the session\n * validator only.  The class you're likely looking for is\n * {@link SessionValidator}.\n * <p/>\n * We're only simulating sessions here, so this is just a hack to get the job\n * done.  The count down of the session may not be accurate, and one single\n * session is shared through the entire application.  i.e. For testing only.\n *\n */\nclass SessionManager {\n  constructor()\n  {\n    this.randomNumber = Math.random();\n    this.instanceRequests = 1;\n    this.session = {\n      sessionValid: false,\n      sessionTime: 0,\n    };\n    this.terminate = false;\n  }\n\n  /**\n   * The sessionCounter\n   * is used with setTimeout() to repeatedly decrement the session time.  Ideally,\n   * we'd look at the start time of the session time.\n   */\n  static sessionCounter()\n  {\n    if (sessionManager.terminate ||\n      Number(sessionManager.session.sessionTime) <= Number(0))\n    {\n      clearInterval(sessionManager.intervalVariable);\n      sessionManager.intervalVariable = undefined;\n      sessionManager.terminate = false;\n      sessionManager.session.sessionValid = false;\n      sessionManager.session.sessionTime = 0;\n      return;\n    }\n\n    sessionManager.session.sessionTime--;\n    //intervalVariable = setInterval(sessionCounter, 1000);\n  };\n\n  /**\n   * startSession() starts the 1 second calls of sessionCounter().\n   */\n  startSession()\n  {\n    if (this.intervalVariable === undefined)\n    {\n      console.log(\"setting up session timer\");\n      sessionManager.session.sessionValid = true;\n      sessionManager.session.sessionTime = 600;\n      this.intervalVariable = setInterval(SessionManager.sessionCounter, 1000);\n    }\n  };\n\n  /**\n   * expireSession() expires the session and requests termination of\n   * sessionCounter().\n   */\n  expireSession()\n  {\n    //console.log(\"expiring session timer\");\n    this.session = {\n      sessionValid: false,\n      sessionTime: 0\n    };\n    this.terminate = true;\n  };\n}\n// singleton not really needed, since require() caches modules.\nlet sessionManager = undefined;\nif (sessionManager === undefined)\n{\n  //console.log('construct SessionManager');\n  sessionManager = new SessionManager();\n}\nelse\n{\n  sessionManager.instanceRequests++;\n  //console.log(\"Not constructing session manager\" + sessionManager);\n}\n\nconsole.log(\"session manager id: \" + sessionManager.randomNumber);\nmodule.exports.SessionManager = sessionManager;\n\n"]}